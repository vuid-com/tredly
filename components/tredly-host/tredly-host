#!/usr/local/bin/python3.5

# import modules
import builtins
import argparse
import os.path
import sys
import signal
import urllib.request
import tarfile
import ssl
import importlib
from ipaddress import IPv4Address

# capture the sigint handler
def sigintHandler(signal, frame):
    print('')
    print('SIGINT caught. Exiting...')
    # http://www.tldp.org/LDP/abs/html/exitcodes.html
    exit(130)

# catch sigint
signal.signal(signal.SIGINT, sigintHandler)

# set the path to the directory containing this script
builtins.scriptDirectory = os.path.dirname(os.path.realpath(__file__))

# work out whether this is an installed or non installed version
# and include this scripts directories in the path

if (builtins.scriptDirectory == "/usr/local/sbin"):
    sys.path.insert(0, "/usr/local/lib/tredly-host")
    sys.path.insert(0, "/usr/local/lib/tredly/python-common")
    builtins.tredlyConfDirectory = "/usr/local/etc/tredly"
    builtins.tredlyJsonDirectory = "/usr/local/etc/tredly/json"
else:
    print("\033[43m\033[97mWARNING: Running from non installed location\033[49m\033[39m")
    sys.path.insert(0, builtins.scriptDirectory)
    sys.path.insert(0, builtins.scriptDirectory + "/../tredly-libs/python-common")
    builtins.tredlyConfDirectory = builtins.scriptDirectory + "/../tredly/conf"

# import modules
from objects.config.configfile import ConfigFile
from objects.zfs.zfs import ZFSDataset

from objects.tredly.tredlyhost import *

# include global modules
from includes.defines import *
from includes.util import *
from includes.output import *

# set some constants
SHOW_HELP = False
DEBUG = False
VERBOSE= False
SCRIPTNAME = os.path.basename(__file__)

# get an argparser object
argParser = argparse.ArgumentParser(description=SCRIPTNAME)

# set up arguments in argparser
argParser.add_argument('action', nargs='?', help='init create destroy list modify replace')
argParser.add_argument('subject', nargs='?', help='container etc')
argParser.add_argument('target', nargs='?', help='partition etc')
argParser.add_argument('identifier', nargs='?', help='identifier - uuid etc')

argParser.add_argument('--maxcpu', help='Set max CPU')
argParser.add_argument('--maxram', help='Set max RAM')
argParser.add_argument('--maxhdd', help='Set max HDD')
argParser.add_argument('--ipv4whitelist', help='Set ip4 whitelist')
argParser.add_argument('--publicips', help='Set public ips')
argParser.add_argument('--partitionname', help='Change partition name')

argParser.add_argument('-d', '--debug', action='store_true', help='Enable debug mode')
argParser.add_argument('--verbose', action='store_true', help='Enable verbose mode')
argParser.add_argument('-v', '--version', action='store_true', help='Show version')


# parse args
args = argParser.parse_args()

actionArgs = {}

# If version requested then display and exit
if (args.action == "version"):
    # print the version
    print(SCRIPTNAME + ": version " + VERSION_NUMBER + " (built " + VERSION_DATE + ")")
    exit(0)

# populate the action args
if (args.maxcpu is not None) and (len(args.maxcpu) > 0):
    actionArgs['maxCpu'] = args.maxcpu
else:
    actionArgs['maxCpu'] = None

if (args.maxram is not None) and (len(args.maxram)) > 0:
    actionArgs['maxRam'] = args.maxram
else:
    actionArgs['maxRam'] = None

if (args.maxhdd is not None) and (len(args.maxhdd) > 0):
    actionArgs['maxHdd'] = args.maxhdd
else:
    actionArgs['maxHdd'] = None
    
if (args.ipv4whitelist is not None) and (len(args.ipv4whitelist) > 0):
    actionArgs['ipv4Whitelist'] = args.ipv4whitelist
else:
    actionArgs['ipv4Whitelist'] = None
    
if (args.publicips is not None) and (len(args.publicips) > 0):
    actionArgs['publicIps'] = args.publicips
else:
    actionArgs['publicIps'] = None
    
if (args.partitionname is not None) and (len(args.partitionname) > 0):
    actionArgs['partitionName'] = args.partitionname
else:
    actionArgs['partitionName'] = None

# get a tredlyhost object
tredlyHost = TredlyHost()

# enable debug mode if requested
if (args.debug):
    DEBUG = True

# enable verbose mode if requested
if (args.verbose):
    VERBOSE = True

# make sure the base ZFS datasets are present
zfsTredly = ZFSDataset(ZFS_TREDLY_DATASET)
if (not zfsTredly.exists()):
    e_error("Dataset " + ZFS_TREDLY_DATASET + " does not exist. Please run tredly init")
    exit(1)

zfsReleases = ZFSDataset(ZFS_TREDLY_RELEASES_DATASET)
if (not zfsReleases.exists()):
    e_error("Dataset " + ZFS_TREDLY_RELEASES_DATASET + " does not exist. Please run tredly init")
    exit(1)

zfsPartitions = ZFSDataset(ZFS_TREDLY_PARTITIONS_DATASET)
if (not zfsPartitions.exists()):
    e_error("Dataset " + ZFS_TREDLY_PARTITIONS_DATASET + " does not exist. Please run tredly init")
    exit(1)

zfsDefaultPartition = ZFSDataset(ZFS_TREDLY_PARTITIONS_DATASET + '/' + TREDLY_DEFAULT_PARTITION)
if (not zfsDefaultPartition.exists()):
    e_error("Dataset " + ZFS_TREDLY_PARTITIONS_DATASET + '/' + TREDLY_DEFAULT_PARTITION + " does not exist. Please run tredly init")
    exit(1)

# process the config file
builtins.tredlyCommonConfig = ConfigFile()
# parse it
builtins.tredlyCommonConfig.process()

# validate the common config
if (not builtins.tredlyCommonConfig.validate()):
    exit_with_error("Failed to validate tredly-host.conf")

# try loading the action module
try:
    # dynamically load the module
    mod = importlib.import_module("actions." + args.action.lower())
except ImportError as e:
    e_error('No action "' + args.action.lower() + '" found.')
    exit(1)

# get a handle to the module
actionMod = getattr(mod, "Action" + args.action[0].upper() + args.action[1:].lower())

# initialise the object and run the command
actionObj = actionMod(args.subject, args.target, args.identifier, actionArgs)

# exit with code 0 if we reached this point
exit(0)